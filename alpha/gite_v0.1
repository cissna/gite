#!/bin/bash
#
# gite - An AI-powered Git command-line assistant, now on GPT-4.1 via OpenAI-Compatible API.
#
# This script takes a natural language description of a Git task,
# calls your custom OpenAI-Compatible endpoint, and executes
# the returned Git command(s) after user confirmation.
#
# NEW: It can now handle multi-line command sequences and ask for
# clarification if the prompt is ambiguous.

# --- Configuration ---
BASE_URL="http://oco40g4o4cssokcogg8sso0w.20.51.211.53.sslip.io/v1"
API_URL="${BASE_URL}/chat/completions"
# You can also export OPENAI_API_KEY externally instead of hard-coding.
OPENAI_API_KEY="${S_OPENAI_API_KEY:?Environment variable OPENAI_API_KEY must be set}"
CUSTOM_MODEL_HEADER="gpt41"

# --- Pre-flight Checks ---
for cmd in curl jq; do
  if ! command -v "$cmd" &> /dev/null; then
    echo "Error: '$cmd' is not installed. Please install it."
    exit 1
  fi
done

if [ "$#" -eq 0 ]; then
  echo "Usage: gite \"your git command in plain english\""
  exit 1
fi

USER_PROMPT="$*"
# NEW: The system prompt is updated with the new rules for the AI.
SYSTEM_PROMPT="You are an expert Git assistant. Your goal is to provide the correct git command(s).

1. If the user's request can be fulfilled with a single, non-interactive command, return it inside single backticks. Example: \`git status\`
2. If the request requires multiple sequential, non-interactive commands, return them in a triple-backticked code block, one command per line.
   Example:
   \`\`\`
   git add .
   git commit -m \"New feature\"
   \`\`\`
3. If you are unsure or need more information to provide a safe and accurate command, ask a single, clear clarifying question. Your response MUST end with a question mark. Example: What is the name of the branch you want to merge?

Return ONLY the command(s) or the question. Do not add any other explanations or conversational text."

echo "gite: Thinking…"

# NEW: Build the initial JSON payload for the API call.
# This will be updated in a loop if the AI asks for clarification.
PAYLOAD=$(jq -n \
  --arg model "$CUSTOM_MODEL_HEADER" \
  --arg system "$SYSTEM_PROMPT" \
  --arg user "$USER_PROMPT" \
  '{
      model: $model,
      messages: [
        { "role": "system", "content": $system },
        { "role": "user",   "content": $user   }
      ],
      temperature: 0,
      max_tokens: 200
  }')

# NEW: Loop to handle clarification questions.
while true; do
  # Call your OpenAI-Compatible endpoint
  RESPONSE=$(curl -s -X POST "$API_URL" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $OPENAI_API_KEY" \
    -H "model: $CUSTOM_MODEL_HEADER" \
    -d "$PAYLOAD")

  # Fail on API errors
  if echo "$RESPONSE" | jq -e '.error' &> /dev/null; then
    echo "Error: API call failed."
    echo "$RESPONSE"
    exit 1
  fi

  # Extract the message content
  AI_RESPONSE=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')

  # NEW: Check if the AI is asking a question.
  if [[ "$AI_RESPONSE" == *'?' ]]; then
    echo
    echo -e "\033[1;33mAI needs clarification:\033[0m"
    echo "$AI_RESPONSE"
    read -p "Your answer: " USER_ANSWER
    echo
    echo "gite: Thinking with your new information..."

    # Add the AI's question and the user's answer to the payload for context
    PAYLOAD=$(echo "$PAYLOAD" | jq \
      --arg assistant_question "$AI_RESPONSE" \
      --arg user_answer "$USER_ANSWER" \
      '.messages += [
        {"role": "assistant", "content": $assistant_question},
        {"role": "user", "content": $user_answer}
      ]')
    continue # Continue the loop to ask the AI again with the new info
  else
    GIT_COMMAND="$AI_RESPONSE"
    break # Exit the loop if we have a command
  fi
done


if [ -z "$GIT_COMMAND" ]; then
  echo "Error: received an empty or invalid command from the AI."
  echo "Full Response: $RESPONSE"
  exit 1
fi

# NEW: Process single-line or multi-line command blocks.
if [[ "$GIT_COMMAND" == \`\`\`* ]]; then
  # Multi-line command: strip the first and last lines (the ```)
  GIT_COMMAND=$(echo "$GIT_COMMAND" | sed '1d;$d')
else
  # Single-line command: strip the backticks from the start and end.
  GIT_COMMAND=$(echo "$GIT_COMMAND" | sed 's/^`//;s/`$//')
fi


# Confirm & execute
echo
echo -e "\033[1;34mSuggested command(s):\033[0m"
# NEW: Use `cat -n` for multi-line commands to number them
if [ "$(echo "$GIT_COMMAND" | wc -l)" -gt 1 ]; then
    echo -e "\033[1m"
    echo "$GIT_COMMAND" | cat -n
    echo -e "\033[0m"
else
    echo -e "\033[1m$GIT_COMMAND\033[0m"
fi

echo -e "\033[0;33mWarning: Always review AI-generated commands before running.\033[0m"
read -p "Execute? [y/N] " -n1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
  echo "Executing…"
  # NEW: Safely execute each line of the command(s)
  # 'set -e' would also work, but this gives more granular control.
  while IFS= read -r line; do
    # Skip empty lines that might result from parsing
    [ -z "$line" ] && continue
    echo "+ $line"
    eval "$line"
    # Stop if a command fails
    if [ $? -ne 0 ]; then
      echo -e "\033[0;31mError executing command. Aborting.\033[0m"
      exit 1
    fi
  done <<< "$GIT_COMMAND"
else
  echo "Cancelled."
fi